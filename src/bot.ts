import dotenv from 'dotenv';
import type { Middleware } from 'telegraf';
import { Telegraf } from 'telegraf';
import { startHandler, searchHandler, textHandler } from './handlers/index.js';
import {
	airportFromHandler,
	airportToHandler,
	dateSelectionHandler,
	doneHandler,
	nextMonthHandler,
	prevMonthHandler,
} from './handlers/selectionHandlers.js';
import type { MyContext } from './types.js';
import logger from './utils/logger.js';
import { sessionMiddleware } from './utils/sessionMiddleware.js';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
 */
function loadEnv(): void {
	const dotenvResult = dotenv.config();
	if (dotenvResult.error) {
		logger.error({ err: dotenvResult.error }, '[‚ö†Ô∏è] Error loading .env file.');
		process.exit(1);
	}

	const requiredEnvVars = ['BOT_TOKEN', 'TRAVELPAYOUTS_AVIASALES'];
	const missingVars = requiredEnvVars.filter((varName) => !process.env[varName]);

	if (missingVars.length > 0) {
		logger.error({ missingVars }, '[‚ö†Ô∏è] Missing required environment variables.');
		process.exit(1);
	}
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
 *
 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf.
 */
function registerActionHandlers(bot: Telegraf<MyContext>): void {
	bot.action('START_SEARCH', searchHandler);
	bot.on('text', textHandler);

	// –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	const actionHandlers: { handler: Middleware<MyContext>; pattern: RegExp }[] = [
		{ pattern: /SELECT_FROM_(?<airportCode>[A-Z]{3})/, handler: airportFromHandler },
		{ pattern: /SELECT_TO_(?<airportCode>[A-Z]{3})/, handler: airportToHandler },
		{ pattern: /SELECT_DATE_(?<date>\d{4}-\d{2}-\d{2})/, handler: dateSelectionHandler },
		{ pattern: /PREV_MONTH_(?<year>\d{4})_(?<month>\d{1,2})/, handler: prevMonthHandler },
		{ pattern: /NEXT_MONTH_(?<year>\d{4})_(?<month>\d{1,2})/, handler: nextMonthHandler },
	];

	for (const { pattern, handler } of actionHandlers) {
		bot.action(pattern, handler);
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
	bot.action('DONE', doneHandler);
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.
 *
 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf.
 */
function setupGlobalErrorHandlers(bot: Telegraf<MyContext>): void {
	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ Telegraf.
	 *
	 * @param error - –û—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫—à–∞—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
	 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
	 */
	/* eslint-disable promise/prefer-await-to-then */
	/* eslint-disable promise/prefer-await-to-callbacks */
	bot.catch(async (error, ctx) => {
		logger.error(
			{ err: error, update_id: ctx.update.update_id },
			'[‚ùå] An error occurred while processing the update.',
		);
	});

	/* eslint-disable promise/prefer-await-to-callbacks */

	/**
	 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
	 *
	 * @param signal - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
	 * @returns –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞.
	 */
	function gracefulShutdown(signal: string): () => void {
		return () => {
			logger.warn(`[‚úã] Received ${signal}, stopping bot.`);
			bot.stop();
			process.exit(0);
		};
	}

	process.once('SIGINT', gracefulShutdown('SIGINT'));
	process.once('SIGTERM', gracefulShutdown('SIGTERM'));

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
	process.on('unhandledRejection', (reason, promise) => {
		logger.error({ promise, reason }, '[‚ö†Ô∏è] Unhandled promise rejection:');
		process.exit(1);
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	process.on('uncaughtException', (error) => {
		logger.error({ err: error }, '[‚ùå] Unhandled exception:');
		process.exit(1);
	});
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞.
 *
 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf.
 */
async function launchBot(bot: Telegraf<MyContext>): Promise<void> {
	try {
		logger.info('[üöÄ] Launching bot...');
		await bot.launch();
	} catch (error) {
		logger.error({ err: error }, '[‚ùå] Error launching the bot:');
		process.exit(1);
	}
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫—É middleware, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
 */
async function initializeBot(): Promise<void> {
	loadEnv();

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å BOT_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	const bot = new Telegraf<MyContext>(process.env.BOT_TOKEN!);

	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ middleware –¥–ª—è —Å–µ—Å—Å–∏–π
	bot.use(sessionMiddleware);

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π
	bot.start(startHandler);
	registerActionHandlers(bot);

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
	setupGlobalErrorHandlers(bot);

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	await launchBot(bot);
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IIFE
(async () => {
	await initializeBot();
})().catch((error) => {
	logger.error({ err: error }, '[‚ùå] Failed to initialize the bot.');
	process.exit(1);
});

// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
logger.info('[‚úÖ] Bot launched successfully!');
