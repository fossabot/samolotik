import type { MiddlewareFn } from 'telegraf';
import { Markup } from 'telegraf';
import { getAirports } from '../services/getAirports.js';
import { trackFlights } from '../services/trackFlights.js';
import type { MyContext } from '../types.js';
import { generateCalendarMarkup } from '../utils/calendar.js';
import logger from '../utils/logger.js';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞
export const airportFromHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
		if (!ctx.message || !('text' in ctx.message)) {
			await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const city = ctx.message.text;
		logger.info(`Departure city: ${city} ‚úàÔ∏è`);

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
		const airports = await getAirports(city);

		// –ï—Å–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (airports.length === 0) {
			await ctx.reply('–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			return;
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤ —Å–µ—Å—Å–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
		ctx.session = {
			...ctx.session,
			airportsFrom: airports,
			step: 'from_airport_selection',
		};

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const airportButtons = airports.map((airport) => [airport.name]);
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', Markup.keyboard(airportButtons).oneTime().resize());
	} catch (error) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		logger.error('Error handling departure airport selection ‚ùå', error);
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è
export const airportToHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
		if (!ctx.message || !('text' in ctx.message)) {
			await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è.');
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const city = ctx.message.text;
		logger.info(`Arrival city: ${city} üõ¨`);

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
		const airports = await getAirports(city);

		// –ï—Å–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (airports.length === 0) {
			await ctx.reply('–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			return;
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤ —Å–µ—Å—Å–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
		ctx.session = {
			...ctx.session,
			airportsTo: airports,
			step: 'to_airport_selection',
		};

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const airportButtons = airports.map((airport) => [airport.name]);
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è:', Markup.keyboard(airportButtons).oneTime().resize());
	} catch (error) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		logger.error('Error handling arrival airport selection ‚ùå', error);
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞
export const dateSelectionHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª–æ—Å—å —Å –¥–∞—Ç–æ–π
		if (!ctx.match?.groups?.date) {
			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.');
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –≥—Ä—É–ø–ø—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
		const date = ctx.match.groups.date;
		logger.info(`Selected departure date: ${date} üìÖ`);

		// –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
		const selectedDates = ctx.session.selectedDates ?? [];

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∏ —É–¥–∞–ª—è–µ–º –µ—ë, –µ—Å–ª–∏ –¥–∞
		if (selectedDates.includes(date)) {
			logger.info(`Date already selected, removing: ${date} üóëÔ∏è`);
			const updatedDates = selectedDates.filter((selectedDate: string) => selectedDate !== date);

			ctx.session = {
				...ctx.session,
				selectedDates: updatedDates,
			};
		} else {
			// –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
			logger.info(`Adding selected date: ${date} ‚ûï`);
			const updatedDates = [...selectedDates, date];

			ctx.session = {
				...ctx.session,
				selectedDates: updatedDates,
			};
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
		await ctx.editMessageReplyMarkup(
			generateCalendarMarkup(
				ctx.session.selectedDates ?? [],
				ctx.session.calendarYear ?? new Date().getFullYear(),
				ctx.session.calendarMonth ?? new Date().getMonth(),
			).reply_markup,
		);
	} catch (error: any) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		logger.error('Error selecting departure date ‚ùå', error);
		if (error.code === 400) {
			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
		}
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
export const doneHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		logger.info('"Done" button pressed ‚úÖ');

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã
		if (!ctx.session.selectedDates || ctx.session.selectedDates.length === 0) {
			await ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É.');
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è
		if (!ctx.session.fromAirport || !ctx.session.toAirport) {
			logger.error('fromAirport or toAirport missing in session ‚ö†Ô∏è');
			await ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.');
			return;
		}

		logger.debug('Starting ticket search üîç');

		// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
		for (const date of ctx.session.selectedDates) {
			const result = await trackFlights(ctx.session.fromAirport, ctx.session.toAirport, date);
			await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ ${date}:
${result}`);
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
		ctx.session = {
			...ctx.session,
			step: 'completed',
			selectedDates: [],
			calendarYear: new Date().getFullYear(),
			calendarMonth: new Date().getMonth(),
		};

		logger.debug('Search completed ‚úÖ');
	} catch (error) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		logger.error('Error handling "Done" button press ‚ùå', error);
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
export const prevMonthHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		const calendarMonth = ctx.session.calendarMonth === 0 ? 11 : (ctx.session.calendarMonth ?? 1) - 1;
		const calendarYear =
			ctx.session.calendarMonth === 0
				? (ctx.session.calendarYear ?? new Date().getFullYear()) - 1
				: (ctx.session.calendarYear ?? new Date().getFullYear());

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
		ctx.session = {
			...ctx.session,
			calendarMonth,
			calendarYear,
		};

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
		await ctx.editMessageReplyMarkup(
			generateCalendarMarkup(ctx.session.selectedDates ?? [], calendarYear, calendarMonth).reply_markup,
		);
	} catch (error) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
		logger.error('Error moving to previous month ‚ùå', error);
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
export const nextMonthHandler: MiddlewareFn<MyContext> = async (ctx) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª–æ—Å—å —Å –≥–æ–¥–æ–º –∏ –º–µ—Å—è—Ü–µ–º
		if (!ctx.match?.groups) {
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.');
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –∏–∑ –≥—Ä—É–ø–ø—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
		const year = Number.parseInt(ctx.match.groups.year, 10);
		const month = Number.parseInt(ctx.match.groups.month, 10);

		// –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		const calendarMonth = month === 11 ? 0 : month + 1;
		const calendarYear = month === 11 ? year + 1 : year;

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
		ctx.session = {
			...ctx.session,
			calendarMonth,
			calendarYear,
		};

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
		await ctx.editMessageReplyMarkup(
			generateCalendarMarkup(ctx.session.selectedDates ?? [], calendarYear, calendarMonth).reply_markup,
		);
	} catch (error) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		logger.error('Error moving to next month ‚ùå', error);
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
	}
};
