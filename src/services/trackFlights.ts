import axios from 'axios';
import type { Flight } from '../types.js';
import logger from '../utils/logger.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –∞–≤–∏–∞—Ä–µ–π—Å—ã
export const trackFlights = async (from: string, to: string, date: string): Promise<string> => {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
	logger.info(`[‚úàÔ∏è] Tracking tickets from ${from} to ${to} on date ${date}.`);

	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
		if (!from || !to || !date) {
			logger.error('[‚ùå] Incorrect input data.')
		}

		// –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const apiKey = process.env.TRAVELPAYOUTS_AVIASALES;
		if (!apiKey) {
			logger.error('[‚ö†Ô∏è] Aviasales API key not found in environment variables.');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		const dateObj = new Date(date);
		if (Number.isNaN(dateObj.getTime())) {
			logger.error('[‚ùå] Incorrect date format.');
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
		const formattedDate = dateObj.toISOString().split('T')[0];

		// URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Aviasales
		const url = 'https://api.travelpayouts.com/aviasales/v3/prices_for_dates';

		// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
		const params = {
			origin: from, // –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
			destination: to, // –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
			currency: 'rub', // –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω
			departure_at: formattedDate, // –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
			sorting: 'price', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
			direct: true, // –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã
			limit: 10, // –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
			token: apiKey, // –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
		};

		// –õ–æ–≥–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		logger.debug(`[üåê] API request URL: ${url}`);
		logger.debug('[üåê] Request parameters:', params);

		// –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API
		const response = await axios.get(url, { params });

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ 200 - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
		if (response.status !== 200) {
			logger.error(`[‚ùå] Error during API request: ${response.statusText}.`);
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
		const data = response.data;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö
		if (!data.data || data.data.length === 0) {
			logger.warn('[‚ùå] Tickets not found.');
			return '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.';
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Flight
		const flights: Flight[] = data.data.map((flight: any) => ({
			price: flight.price, // –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
			airline: flight.airline, // –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è
			date: flight.departure_at.split('T')[0], // –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞
			flight_number: flight.flight_number, // –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
			departure_at: flight.departure_at, // –í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞
			return_at: flight.return_at, // –í—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		}));

		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ä–µ–π—Å –∏–∑ —Å–ø–∏—Å–∫–∞
		const cheapestFlight = flights.reduce((prev, curr) => (curr.price < prev.price ? curr : prev));

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –¥–µ—à–µ–≤–æ–º –±–∏–ª–µ—Ç–µ
		logger.info(`[üí∏] Cheapest ticket: ${cheapestFlight.price} RUB, Airline: ${cheapestFlight.airline}.`);

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –¥–µ—à–µ–≤–æ–º –±–∏–ª–µ—Ç–µ
		return `–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç: ${cheapestFlight.price} —Ä—É–±.
–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: ${cheapestFlight.airline}
–†–µ–π—Å: ${cheapestFlight.flight_number}
–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: ${cheapestFlight.departure_at}`;
	} catch (error: unknown) {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
		if (axios.isAxiosError(error)) {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
			logger.error('[‚ùå] Error during API request:', error.message);
		} else if (error instanceof Error) {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
			logger.error('[‚ùå] Error fetching ticket data:', error.message);
		} else {
			// –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É
			logger.error('[‚ùì] Unknown error:', error);
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∏–ª–µ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
	}
};
